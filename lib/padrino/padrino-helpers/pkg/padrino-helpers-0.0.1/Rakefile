require File.join(File.dirname(__FILE__), "/../padrino-core/lib/padrino-core/version.rb")

require "rake/clean"
require "rake/gempackagetask"

NAME     = "padrino-helpers"
AUTHOR   = "Padrino Team"
EMAIL    = "d.dagostino@lipsiasoft.com"
HOMEPAGE = "http://github.com/padrino"
SUMMARY  = "The Godfather of Sinatra"

# For RubyForge release task
RUBY_FORGE_PROJECT  = "padrino"
PROJECT_URL         = HOMEPAGE
PROJECT_SUMMARY     = SUMMARY
PROJECT_DESCRIPTION = SUMMARY

GEM_AUTHOR = AUTHOR
GEM_EMAIL  = EMAIL

GEM_NAME    = NAME
PKG_BUILD   = ENV['PKG_BUILD'] ? '.' + ENV['PKG_BUILD'] : ''
GEM_VERSION = Padrino::VERSION  + PKG_BUILD

RELEASE_NAME    = "REL #{GEM_VERSION}"

spec = Gem::Specification.new do |s|
  s.rubyforge_project = 'padrino'
  s.name         = NAME
  s.version      = GEM_VERSION
  s.platform     = Gem::Platform::RUBY
  s.author       = AUTHOR
  s.email        = EMAIL
  s.homepage     = HOMEPAGE
  s.summary      = SUMMARY
  s.description  = SUMMARY
  s.files        = %w(LICENSE README.rdoc Rakefile) + Dir.glob("{lib}/**/*")
  s.required_rubygems_version = ">= 1.3.0"
  s.add_dependency "sinatra", "> 0.9.0"
  s.add_dependency "activesupport", "> 2.3.4"
end

desc 'Clean up files.'
task :clean do |t|
  FileUtils.rm_rf "doc"
  FileUtils.rm_rf "tmp"
  FileUtils.rm_rf "pkg"
end

Rake::GemPackageTask.new(spec) do |p|
  p.gem_spec = spec
  p.need_tar = true
  p.need_zip = true
end

desc "Install the gem locally"
task :install => [:uninstall, :repackage] do
  sh %{sudo gem install pkg/#{PKG_FILE_NAME}.gem --no-ri --no-rdoc}
end

desc "Unistall the gem from local"
task :uninstall => [:clean] do
  sh %{sudo gem uninstall #{PKG_NAME}} rescue nil
end
 
desc "Generate a gemspec file for GitHub"
task :gemspec do
  File.open("#{spec.name}.gemspec", 'w') do |f|
    f.write spec.to_ruby
  end
end

desc "Publish the release files to RubyForge."
task :release => [ :package ] do
  require 'rubyforge'
  require 'rake/contrib/rubyforgepublisher'

  packages = %w( gem tgz zip ).collect{ |ext| "pkg/#{PKG_NAME}-#{PKG_VERSION}.#{ext}" }

  rubyforge = RubyForge.new
  rubyforge.configure
  rubyforge.login
  rubyforge.add_release(PKG_NAME, PKG_NAME, "REL #{PKG_VERSION}", *packages)
end